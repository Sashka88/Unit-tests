
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Field;


public class PenTest {

    @DataProvider
    public Object[][] inkContainerValueData() {
        return new Object[][]{
                {1},
                {0},
                {-1}
        };
    }

    private Field getPrivateField(String privateFieldName) {
        Field privateField = null;
        try {
            privateField = Pen.class.getDeclaredField(privateFieldName);
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        }
        privateField.setAccessible(true);
        return privateField;
    }

    @Test(dataProvider = "inkContainerValueData")
    public void PenWithInkConstructorTest(int inkExpected) throws IllegalAccessException {
        Pen pen = new Pen(inkExpected);
        Field ink = getPrivateField("inkContainerValue");
        int inkActual = (int) ink.get(pen);
        ink.setAccessible(false);
        Assert.assertEquals(inkActual, inkExpected, "Pen with incorrect ink was created");
    }

        @DataProvider
        public Object[][] inkAndSizeLetterData() {
            return new Object[][]{
                    {10, 1.0},
                    {1, 10.0}
            };
        }

    @Test (dataProvider = "inkAndSizeLetterData")
    public void penWithInkAndSizeConstructorTest(int inkExpected, double sizeExpected) throws IllegalAccessException {
        Pen pen = new Pen(inkExpected, sizeExpected);
        Field sizeLetter = getPrivateField("sizeLetter");
        double sizeActual = (double) sizeLetter.get(pen);
        sizeLetter.setAccessible(false);
        Assert.assertEquals(sizeActual, sizeExpected, "Pen with incorrect sizeLetter was created");
    }

    @DataProvider
    public Object[][] inkSizeColorPenData() {
        return new Object[][]{
                {10, 1.0, "GREEN"},
                {20, 2.0, "BLUE"},
        };
    }
    @Test (dataProvider = "inkSizeColorPenData")
    public void penWithInkSizeColorConstructorTest(int inkExpected, double sizeExpected, String colorExpected) throws IllegalAccessException {
        Pen pen = new Pen(inkExpected, sizeExpected, colorExpected);
        Field color = getPrivateField("color");
        String colorActual = (String) color.get(pen);
        color.setAccessible(false);
        Assert.assertEquals(colorActual, colorExpected, "Pen with incorrect color was created");
    }

    @Test(dataProvider = "inkSizeColorPenData")
    public void getColorTestShouldReturnActualPenColor(int inkExpected, double sizeExpected, String colorExpected) {
        Pen pen = new Pen( inkExpected, sizeExpected, colorExpected);
        String colorActual = pen.getColor();
        Assert.assertEquals(colorActual, colorExpected, "Color should be " + colorExpected);
    }

    @Test(dataProvider = "inkContainerValueData")
    public void isWorkTestInk(int inkExpected) {
        Pen pen = new Pen( inkExpected);
        Boolean isPenWork = pen.isWork();
        Assert.assertTrue(isPenWork, "isPenWork should be true");
    }

    @DataProvider
    public Object[][] negativeInkDataAndWord() {
        return new Object[][]{
                {-1, "Hello"},
                {0, "Hello"},
        };
    }

    @Test(dataProvider = "negativeInkDataAndWord")
    public void writeTestIfIsWorkIsFalse(int inkExpected, String word) {
        Pen pen = new Pen( inkExpected);
        String actualResult = pen.write(word);
        Assert.assertEquals(actualResult, "", "This test should return empty string");
    }

    @DataProvider
    public Object[][] positiveInkSizeAndWord() {
        return new Object[][]{
                {100, 1.0, "Hello"},
        };
    }

    @Test(dataProvider = "positiveInkSizeAndWord")
    public void writeTestIfInkMoreThanWordLength(int inkExpected, double sizeExpected, String word) {
        Pen pen = new Pen(inkExpected, sizeExpected);
        String actualResult = pen.write(word);
        Assert.assertEquals(actualResult, word, "This test should return word");
    }

    @Parameters("spaces")
    @Test
    public void isWriteTestAndInputSpaces(@Optional("  ") String spaces) {
        int ink = spaces.length();
        Pen pen = new Pen(ink);
        pen.write(spaces);
        Assert.assertTrue(pen.isWork(), "Pen should still be able to work after writing spaces");
    }

    @Parameters("word")
    @Test
    public void writeTestIfInkEqualsWordLengthAndWriteSpace(@Optional("Hello") String word) {
        Pen pen = new Pen(word.length(), 1.0);
        pen.write(" ");
        String actualResult = pen.write(word);
        Assert.assertEquals(actualResult, word, "This test should write whole word");
    }

    @DataProvider
    public Object[][] checkSymbols() {
        return new Object[][]{
                {100, 1.0, "Привет", "This test should return word"},
                {100, 1.0, "17383023", "This test should return numbers"},
                {100, 1.0, "TEST", "This test should return uppercase word"},
                {100, 1.0, "test", "This test should return lowercase word"},
                {100, 1.0, "!@#№$;.,%:^&?*()_-|{}[]<>'|/~ ", "This test should return special characters"},
                {1, 1.0, "\n", "Pen shouldn't use ink to transfer carriage"},
                {100, 1.0, " Hello ", "This test should return word with spaces"},
                {100, 1.0, "新的一年", "This test should return chinese word"},
                {100, 1.0, "( ´ ∀ `)ノ～ ♡ (*ﾉωﾉ)", "This test should return emoji"},
        };
    }

    @Test(dataProvider = "checkSymbols")
    public void writeTestForSymbolGroups(int ink, double size, String word, String message) {
        Pen pen = new Pen(ink, size);
        String actualResult = pen.write(word);
        Assert.assertEquals(actualResult, word, message);
    }

    @DataProvider
    public Object[][] checkDifferentInkAndSizeValue() {
        return new Object[][]{
                {5, 1.0, "Value", "This test should return provided text when pen has enough ink"}
        };
    }

    @Test(dataProvider = "checkDifferentInkAndSizeValue")
    public void writeTestWithDifferentInkAndSizeValue(int ink, double size, String word, String message) {
        Pen pen = new Pen(ink, size);
        String actualResult = pen.write(word);
        Assert.assertEquals(actualResult, word, message);
    }
    @DataProvider
    public Object[][] checkDifferentSizeValue() {
        return new Object[][]{
                {100, 200.0, "Hello", "This test should return empty string because sizeLetter is more than ink"},
                {100, 0, "Hello", "This test should return empty string because size letter is null"},
                {100, -5, "Hello", "This test should return empty string because size letter is negative"}
        };
    }

    @Test(dataProvider = "checkDifferentSizeValue")
    public void writeTestWithDifferentSize(int ink, double size, String word, String message) {
        Pen pen = new Pen(ink, size);
        String actualResult = pen.write(word);
        Assert.assertTrue(actualResult.isEmpty(), message);
        }

    @DataProvider
    public Object[][] checkPartOfWord() {
        return new Object[][]{
                {3, 1.0, "Daddy", "This test should return empty string because sizeLetter is more than ink"}
        };
    }

    @Test(dataProvider = "checkPartOfWord")
    public void writeTestIfInkLessThanWordLength(int ink, double size, String word, String message) {
        Pen pen = new Pen (ink, size);
        String expectedResult = word.substring(0, ink);
        String actualResult = pen.write(word);
        Assert.assertEquals(actualResult, expectedResult, message);
    }

    @Test(dataProvider = "inkSizeColorPenData")
    public void doSomethingElseTest(int ink, double size, String color) {
        Pen pen = new Pen(ink, size, color);
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(byteArrayOutputStream));

        pen.doSomethingElse();

        Assert.assertEquals(byteArrayOutputStream.toString().trim(), color);
        System.setOut(null);
    }
}







