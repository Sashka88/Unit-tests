
import org.mockito.Mockito;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;


public class PenTest {


    @DataProvider
    public Object[][] colorData() {
        return new Object[][]{
                {"YELLOW"},
                {"RED"},
                {"BLACK"},
                {"BROWN"},
                {"WHITE"}
        };
    }

    @Test(dataProvider = "colorData")
    public void getColorTestShouldReturnActualPenColor(String colorExpected) {
        Pen pen = new Pen(1000, 1.0, colorExpected);

        String colorActual = pen.getColor();

        Assert.assertEquals(colorActual, colorExpected, "Color should be " + colorExpected);
    }

    @Test
    public void isWorkTestInkContainerValueIsPositive() {
        Pen pen = new Pen(1000);

        Boolean isPenWork = pen.isWork();

        Assert.assertTrue(isPenWork, "isPenWork should be true");
    }


    @Test
    public void isWorkTestInkContainerValueIsNull() {
        Pen pen = new Pen(0);

        Boolean isPenWork = pen.isWork();

        Assert.assertFalse(isPenWork, "isPenWork should be false");
    }

    @Test
    public void isWorkTestInkContainerValueIsNegative() {
        Pen pen = new Pen(-1);

        Boolean isPenWork = pen.isWork();

        Assert.assertFalse(isPenWork, "isPenWork should be false");
    }

    @Test
    public void writeTestIfIsWorkIsFalse() {
        Pen penMock = Mockito.spy(new Pen(100));
        Mockito.when(penMock.isWork()).thenReturn(false);

        String actualResult = penMock.write("Hello");

        Assert.assertEquals(actualResult, "", "This test should return empty string");
    }

    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndInkMoreThanWordLength(@Optional("Hello") String word) {
        Pen penMock = Mockito.spy(new Pen(100, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word");
    }


    @Parameters("spaces")
    @Test
    public void isWriteTestAndInputSpaces(@Optional("  ") String spaces) {
        int ink = spaces.length();
        Pen pen = new Pen(ink);

        pen.write(spaces);

        Assert.assertTrue(pen.isWork(), "Pen should still be able to work after writing spaces");
    }

    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndInkEqualsWordLengthAndWriteSpace(@Optional("Hello") String word) {
        Pen penMock = Mockito.spy(new Pen(word.length(), 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        penMock.write(" ");
        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should write whole word");
    }


    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndInputRussianWord(@Optional("Привет") String word) {
        Pen penMock = Mockito.spy(new Pen(100, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word");
    }


    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndInputNumbers(@Optional("17383023") String word) {
        Pen penMock = Mockito.spy(new Pen(100, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word");
    }

    @Parameters({"word"})
    @Test
    public void writeTestIfIsWorkTrueAndInputUppercase(@Optional("TEST") String word) {
        Pen penMock = Mockito.spy(new Pen(100, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word");
    }

    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndInputLowercase(@Optional("test") String word) {
        Pen penMock = Mockito.spy(new Pen(100, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word");
    }

    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndInputSpecChar(@Optional("!@#№$;.,%:^&?*()_-|{}[]<>'|/~ ") String word) {
        Pen penMock = Mockito.spy(new Pen(100, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word");
    }

    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndInputParagraph(@Optional("Hello\n") String word) {
        Pen penMock = Mockito.spy(new Pen(100, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word with paragraph");
    }

    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndWordWithSpaces(@Optional(" Hello ") String word) {
        Pen penMock = Mockito.spy(new Pen(100, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word");
    }

    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndChineseWord(@Optional("新的一年") String word) {
        Pen penMock = Mockito.spy(new Pen(100, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word");
    }

    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndEmoji(@Optional("( ´ ∀ `)ノ～ ♡ (*ﾉωﾉ)") String word) {
        Pen penMock = Mockito.spy(new Pen(100, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word");
    }


    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndInkEqualsWordLength(@Optional("Value") String word) {
        Pen penMock = Mockito.spy(new Pen(5, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word");
    }

    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndBigSizeLetter(@Optional("Hello") String word) {
        Pen pen = new Pen(100, 200);

        try {
            pen.write(word);
        } catch (StringIndexOutOfBoundsException e) {
            Assert.fail("This test returns StringIndexOutOfBoundsException error because try to return substring from 0 to "
                    + word.length() * 200 + " but there are only " + word.length() + " letters" );
        }
    }


    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndSizeLetterIsNull(@Optional("Hello") String word) {
        Pen penMock = Mockito.spy(new Pen(100, 0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertTrue(actualResult.isEmpty(), "This test should return empty string because size letter is null");
    }

    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndISizeLetterIsNegative(@Optional("Hello") String word) {
        Pen penMock = Mockito.spy(new Pen(100, -5));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertTrue(actualResult.isEmpty(), "This test should return empty string because size letter is negative");
    }



    @Parameters("word")
    @Test
    public void writeTestIfInkLessThanWordLength(@Optional("Daddy") String word) {
        Pen penMock = Mockito.spy(new Pen(3, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);
        String expectedResult = word.substring(0, 3);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, expectedResult, "Part of word should be returned");
    }

    @Parameters("color")
    @Test
    public void doSomethingElseTest(@Optional("BLUE") String color) {
        Pen pen = new Pen(1000, 1.0, color);
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(byteArrayOutputStream));

        pen.doSomethingElse();

        Assert.assertEquals(byteArrayOutputStream.toString().trim(), color);
        System.setOut(null);
    }
}







