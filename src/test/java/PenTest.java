
import org.mockito.Mockito;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class PenTest {


    @DataProvider
    public Object[][] color(){
        return new Object[][]{
                {"YELLOW"},
                {"RED"},
                {"BLACK"},
                {"BROWN"},
                {"WHITE"}
        };
    }
    @Test(dataProvider = "color")
    public void getColorTestShouldReturnActualPenColor(String param) {
        Pen pen = new Pen(1000, 1.0, param);

        String color = pen.getColor();

        Assert.assertEquals(color, param, "Color should be Red");
    }

    @Test
    public void isWorkTestInkContainerValueIsPositive() {
        Pen pen = new Pen(1000);

        Boolean isWork = pen.isWork();

        Assert.assertTrue(isWork, "isWork should be true");
    }



    @Test
    public void isWorkTestInkContainerValueIsNull() {
        Pen pen = new Pen(0);

        Boolean isWork = pen.isWork();

        Assert.assertFalse(isWork, "isWork should be false");
    }

    @Test
    public void isWorkTestInkContainerValueIsNegative() {
        Pen pen = new Pen(-1);

        Boolean isWork = pen.isWork();

        Assert.assertFalse(isWork, "isWork should be False");
    }

    @Test
    public void writeTestIfIsWorkIsFalse() {
        Pen penMock = Mockito.spy(new Pen(100));
        Mockito.when(penMock.isWork()).thenReturn(false);

        String actualResult = penMock.write("Hello");

        Assert.assertEquals(actualResult, "", "This test should return empty string");
    }

    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndInkMoreThanWordLength(@Optional("Hello") String word) {
        Pen penMock = Mockito.spy(new Pen(100, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word");
    }

    @Parameters("word")
    @Test
    public void writeTestIfIsWorkTrueAndInkEqualsWordLength(@Optional("Value") String word) {
        Pen penMock = Mockito.spy(new Pen(5, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, word, "This test should return word");
    }

    @Parameters("word")
    @Test
    public void writeTestIfInkLessThanWordLength(@Optional("Daddy") String word) {
        Pen penMock = Mockito.spy(new Pen(3, 1.0));
        Mockito.when(penMock.isWork()).thenReturn(true);
        String expectedResult = word.substring(0, 3);

        String actualResult = penMock.write(word);

        Assert.assertEquals(actualResult, expectedResult, "Part of word should be returned");
    }

    @Parameters("color")
    @Test
    public void doSomethingElseTest(@Optional("BLUE") String color) {
        Pen pen = new Pen(1000, 1.0, color);
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(byteArrayOutputStream));

        pen.doSomethingElse();

        Assert.assertEquals(byteArrayOutputStream.toString().trim(), color);
        System.setOut(null);
    }
}






